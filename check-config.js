#!/usr/bin/env node

/**
 * Script de v√©rification de la configuration Guin√©eMarket
 * Ex√©cutez ce script pour v√©rifier que tout est configur√© correctement
 */

import fs from "fs";
import path from "path";

console.log("üîç V√©rification de la configuration Guin√©eMarket...\n");

// V√©rifier la pr√©sence du fichier .env
const envPath = path.join(process.cwd(), ".env");
if (!fs.existsSync(envPath)) {
  console.log("‚ùå Fichier .env manquant");
  console.log("üìù Cr√©ez un fichier .env √† la racine du projet avec :");
  console.log("   VITE_SUPABASE_URL=votre_url_supabase");
  console.log("   VITE_SUPABASE_ANON_KEY=votre_cle_anonyme_supabase");
  console.log("\nüí° Copiez le fichier env.example vers .env");
} else {
  console.log("‚úÖ Fichier .env trouv√©");

  // Lire et v√©rifier le contenu du .env
  const envContent = fs.readFileSync(envPath, "utf8");
  const lines = envContent.split("\n");

  let hasSupabaseUrl = false;
  let hasSupabaseKey = false;

  lines.forEach((line) => {
    if (line.includes("VITE_SUPABASE_URL=")) {
      hasSupabaseUrl = true;
      const url = line.split("=")[1];
      if (
        url &&
        !url.includes("votre_url") &&
        !url.includes("votre-projet-id")
      ) {
        console.log("‚úÖ VITE_SUPABASE_URL configur√©");
      } else {
        console.log(
          "‚ö†Ô∏è  VITE_SUPABASE_URL doit √™tre configur√© avec votre vraie URL"
        );
      }
    }

    if (line.includes("VITE_SUPABASE_ANON_KEY=")) {
      hasSupabaseKey = true;
      const key = line.split("=")[1];
      if (
        key &&
        !key.includes("votre_cle") &&
        !key.includes("votre_cle_anonyme")
      ) {
        console.log("‚úÖ VITE_SUPABASE_ANON_KEY configur√©");
      } else {
        console.log(
          "‚ö†Ô∏è  VITE_SUPABASE_ANON_KEY doit √™tre configur√© avec votre vraie cl√©"
        );
      }
    }
  });

  if (!hasSupabaseUrl) {
    console.log("‚ùå VITE_SUPABASE_URL manquant dans le fichier .env");
  }

  if (!hasSupabaseKey) {
    console.log("‚ùå VITE_SUPABASE_ANON_KEY manquant dans le fichier .env");
  }
}

// V√©rifier les d√©pendances
console.log("\nüì¶ V√©rification des d√©pendances...");

try {
  const packageJson = JSON.parse(fs.readFileSync("package.json", "utf8"));
  const requiredDeps = ["@supabase/supabase-js", "react", "react-dom"];

  requiredDeps.forEach((dep) => {
    if (packageJson.dependencies[dep]) {
      console.log(`‚úÖ ${dep} install√© (${packageJson.dependencies[dep]})`);
    } else {
      console.log(`‚ùå ${dep} manquant`);
    }
  });
} catch (error) {
  console.log("‚ùå Erreur lors de la lecture du package.json");
}

// V√©rifier la structure des dossiers
console.log("\nüìÅ V√©rification de la structure...");

const requiredDirs = [
  "src",
  "src/components",
  "src/hooks",
  "src/types",
  "src/lib",
];
requiredDirs.forEach((dir) => {
  if (fs.existsSync(dir)) {
    console.log(`‚úÖ ${dir}/`);
  } else {
    console.log(`‚ùå ${dir}/ manquant`);
  }
});

// Instructions de configuration
console.log("\nüöÄ Instructions de configuration :");
console.log("1. Cr√©ez un projet sur https://supabase.com");
console.log("2. Copiez vos cl√©s dans le fichier .env");
console.log("3. Ex√©cutez le script database-setup.sql dans Supabase");
console.log("4. Lancez le projet avec : npm run dev");

console.log("\nüìö Documentation :");
console.log("- README.md : Instructions g√©n√©rales");
console.log("- SETUP_INSTRUCTIONS.md : Configuration rapide");
console.log("- CONFIGURATION_SUPABASE.md : Configuration d√©taill√©e");
console.log("- database-setup.sql : Script de base de donn√©es");

console.log("\n‚ú® Configuration termin√©e !");
